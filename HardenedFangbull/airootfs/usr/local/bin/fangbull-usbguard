#!/usr/bin/env bash

#
# Fangbull USBGuard Manager
# A comprehensive menu-driven USBGuard management tool
# Author: root0emir
# Version: 1.0
# Last Modified: 2025-01-08
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
USBGUARD_CONF="/etc/usbguard/usbguard-daemon.conf"
USBGUARD_RULES="/etc/usbguard/rules.conf"
LOG_FILE="/var/log/fangbull-usbguard.log"

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}[ERROR]${NC} This script must be run as root"
        echo "Usage: sudo fangbull-usbguard"
        exit 1
    fi
}

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Print header
print_header() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
    echo "║                           FANGBULL USBGUARD MANAGER                          ║"
    echo "║                          Hardened USB Device Control                         ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Check USBGuard installation and service status
check_usbguard_status() {
    echo -e "${BLUE}[INFO]${NC} Checking USBGuard status..."
    
    if ! command -v usbguard >/dev/null 2>&1; then
        echo -e "${RED}[ERROR]${NC} USBGuard is not installed"
        echo "Please install USBGuard: pacman -S usbguard"
        return 1
    fi
    
    local service_status=$(systemctl is-active usbguard 2>/dev/null || echo "inactive")
    local service_enabled=$(systemctl is-enabled usbguard 2>/dev/null || echo "disabled")
    
    echo -e "${CYAN}USBGuard Status:${NC}"
    if [[ "$service_status" == "active" ]]; then
        echo -e "  Service: ${GREEN}✓ Active${NC}"
    else
        echo -e "  Service: ${RED}✗ Inactive${NC}"
    fi
    
    if [[ "$service_enabled" == "enabled" ]]; then
        echo -e "  Enabled: ${GREEN}✓ Enabled${NC}"
    else
        echo -e "  Enabled: ${RED}✗ Disabled${NC}"
    fi
    
    echo
}

# Show main menu
show_menu() {
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}USBGUARD MANAGEMENT MENU:${NC}"
    echo -e "${YELLOW}Service Management:${NC}"
    echo "  1) Check USBGuard Status"
    echo "  2) Start USBGuard Service"
    echo "  3) Stop USBGuard Service"
    echo "  4) Enable USBGuard (Auto-start)"
    echo "  5) Disable USBGuard"
    echo
    echo -e "${YELLOW}Device Management:${NC}"
    echo "  6) List Connected USB Devices"
    echo "  7) List USBGuard Rules"
    echo "  8) Allow Device (Temporary)"
    echo "  9) Block Device"
    echo " 10) Allow Device (Permanent)"
    echo " 11) Remove Device Rule"
    echo
    echo -e "${YELLOW}Policy Management:${NC}"
    echo " 12) Generate Initial Policy"
    echo " 13) Backup Current Rules"
    echo " 14) Restore Rules from Backup"
    echo " 15) Reset to Default Policy"
    echo " 16) Import Custom Rules"
    echo
    echo -e "${YELLOW}Monitoring & Logs:${NC}"
    echo " 17) Monitor USB Events (Real-time)"
    echo " 18) View USBGuard Logs"
    echo " 19) View Blocked Devices Log"
    echo " 20) Export Device Audit Report"
    echo
    echo -e "${YELLOW}Configuration:${NC}"
    echo " 21) Configure USBGuard Settings"
    echo " 22) Set Device Insertion Policy"
    echo " 23) Configure Notification Settings"
    echo "  0) Exit"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
}

# List connected USB devices
list_usb_devices() {
    echo -e "${BLUE}[INFO]${NC} Connected USB Devices:"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    if command -v usbguard >/dev/null 2>&1 && systemctl is-active usbguard >/dev/null 2>&1; then
        usbguard list-devices 2>/dev/null || {
            echo -e "${YELLOW}[WARNING]${NC} USBGuard service not running or no devices found"
            echo "Falling back to lsusb..."
            lsusb 2>/dev/null | sed 's/^/  /'
        }
    else
        echo "Using lsusb (USBGuard not active):"
        lsusb 2>/dev/null | sed 's/^/  /' || echo "  No USB devices found"
    fi
    echo
}

# List USBGuard rules
list_usbguard_rules() {
    echo -e "${BLUE}[INFO]${NC} Current USBGuard Rules:"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    if [[ -f "$USBGUARD_RULES" ]]; then
        cat "$USBGUARD_RULES" | nl -ba | sed 's/^/  /'
    else
        echo -e "${YELLOW}[WARNING]${NC} No rules file found at $USBGUARD_RULES"
    fi
    echo
}

# Allow device temporarily
allow_device_temp() {
    echo -e "${BLUE}[INFO]${NC} Temporarily allowing USB device..."
    list_usb_devices
    
    echo -n -e "${YELLOW}Enter device ID to allow (or 'q' to quit): ${NC}"
    read -r device_id
    
    if [[ "$device_id" == "q" ]]; then
        return
    fi
    
    if usbguard allow-device "$device_id" 2>/dev/null; then
        echo -e "${GREEN}✓${NC} Device $device_id temporarily allowed"
        log_message "Device $device_id temporarily allowed"
    else
        echo -e "${RED}✗${NC} Failed to allow device $device_id"
    fi
}

# Block device
block_device() {
    echo -e "${BLUE}[INFO]${NC} Blocking USB device..."
    list_usb_devices
    
    echo -n -e "${YELLOW}Enter device ID to block (or 'q' to quit): ${NC}"
    read -r device_id
    
    if [[ "$device_id" == "q" ]]; then
        return
    fi
    
    if usbguard block-device "$device_id" 2>/dev/null; then
        echo -e "${GREEN}✓${NC} Device $device_id blocked"
        log_message "Device $device_id blocked"
    else
        echo -e "${RED}✗${NC} Failed to block device $device_id"
    fi
}

# Allow device permanently
allow_device_permanent() {
    echo -e "${BLUE}[INFO]${NC} Permanently allowing USB device..."
    list_usb_devices
    
    echo -n -e "${YELLOW}Enter device ID to allow permanently (or 'q' to quit): ${NC}"
    read -r device_id
    
    if [[ "$device_id" == "q" ]]; then
        return
    fi
    
    if usbguard allow-device "$device_id" -p 2>/dev/null; then
        echo -e "${GREEN}✓${NC} Device $device_id permanently allowed"
        log_message "Device $device_id permanently allowed"
    else
        echo -e "${RED}✗${NC} Failed to permanently allow device $device_id"
    fi
}

# Generate initial policy
generate_initial_policy() {
    echo -e "${BLUE}[INFO]${NC} Generating initial USBGuard policy..."
    echo -e "${YELLOW}[WARNING]${NC} This will create rules for currently connected devices"
    echo -n -e "${YELLOW}Continue? (y/n): ${NC}"
    read -r confirm
    
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        # Backup existing rules
        if [[ -f "$USBGUARD_RULES" ]]; then
            cp "$USBGUARD_RULES" "${USBGUARD_RULES}.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Generate new rules
        if usbguard generate-policy > "$USBGUARD_RULES" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Initial policy generated successfully"
            log_message "Initial USBGuard policy generated"
        else
            echo -e "${RED}✗${NC} Failed to generate initial policy"
        fi
    fi
}

# Monitor USB events
monitor_usb_events() {
    echo -e "${BLUE}[INFO]${NC} Monitoring USB events in real-time..."
    echo -e "${YELLOW}Press Ctrl+C to stop monitoring${NC}"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    if systemctl is-active usbguard >/dev/null 2>&1; then
        usbguard watch 2>/dev/null || {
            echo -e "${RED}[ERROR]${NC} Failed to start USB monitoring"
            echo "Falling back to journal monitoring..."
            journalctl -u usbguard -f
        }
    else
        echo -e "${RED}[ERROR]${NC} USBGuard service is not running"
    fi
}

# View USBGuard logs
view_usbguard_logs() {
    echo -e "${BLUE}[INFO]${NC} Recent USBGuard logs:"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    journalctl -u usbguard --no-pager -n 50 | sed 's/^/  /'
    echo
}

# Configure USBGuard settings
configure_usbguard() {
    echo -e "${BLUE}[INFO]${NC} USBGuard Configuration Options:"
    echo "1) Edit main configuration file"
    echo "2) Set insertion policy (allow/block/apply-policy)"
    echo "3) Configure audit logging"
    echo "4) Set device manager backend"
    echo "0) Back to main menu"
    echo
    echo -n -e "${YELLOW}Choose option: ${NC}"
    read -r config_choice
    
    case $config_choice in
        1)
            if command -v nano >/dev/null 2>&1; then
                nano "$USBGUARD_CONF"
            elif command -v vim >/dev/null 2>&1; then
                vim "$USBGUARD_CONF"
            else
                echo -e "${RED}[ERROR]${NC} No text editor found"
            fi
            ;;
        2)
            echo "Available insertion policies:"
            echo "  allow - Allow all new devices"
            echo "  block - Block all new devices"
            echo "  apply-policy - Apply rules from policy"
            echo -n -e "${YELLOW}Enter policy (allow/block/apply-policy): ${NC}"
            read -r policy
            if [[ "$policy" =~ ^(allow|block|apply-policy)$ ]]; then
                sed -i "s/^InsertionPolicy=.*/InsertionPolicy=$policy/" "$USBGUARD_CONF"
                echo -e "${GREEN}✓${NC} Insertion policy set to: $policy"
            else
                echo -e "${RED}✗${NC} Invalid policy"
            fi
            ;;
        *)
            return
            ;;
    esac
}

# Main function
main() {
    check_root
    
    # Create log file if it doesn't exist
    touch "$LOG_FILE"
    
    log_message "Fangbull USBGuard Manager started"
    
    while true; do
        print_header
        check_usbguard_status
        show_menu
        
        echo -n -e "${YELLOW}Enter your choice [0-23]: ${NC}"
        read -r choice
        
        case $choice in
            1)
                print_header
                check_usbguard_status
                ;;
            2)
                echo -e "${BLUE}[INFO]${NC} Starting USBGuard service..."
                if systemctl start usbguard; then
                    echo -e "${GREEN}✓${NC} USBGuard service started"
                else
                    echo -e "${RED}✗${NC} Failed to start USBGuard service"
                fi
                ;;
            3)
                echo -e "${BLUE}[INFO]${NC} Stopping USBGuard service..."
                if systemctl stop usbguard; then
                    echo -e "${GREEN}✓${NC} USBGuard service stopped"
                else
                    echo -e "${RED}✗${NC} Failed to stop USBGuard service"
                fi
                ;;
            4)
                echo -e "${BLUE}[INFO]${NC} Enabling USBGuard service..."
                if systemctl enable usbguard; then
                    echo -e "${GREEN}✓${NC} USBGuard service enabled"
                else
                    echo -e "${RED}✗${NC} Failed to enable USBGuard service"
                fi
                ;;
            5)
                echo -e "${BLUE}[INFO]${NC} Disabling USBGuard service..."
                if systemctl disable usbguard; then
                    echo -e "${GREEN}✓${NC} USBGuard service disabled"
                else
                    echo -e "${RED}✗${NC} Failed to disable USBGuard service"
                fi
                ;;
            6)
                print_header
                list_usb_devices
                ;;
            7)
                print_header
                list_usbguard_rules
                ;;
            8)
                print_header
                allow_device_temp
                ;;
            9)
                print_header
                block_device
                ;;
            10)
                print_header
                allow_device_permanent
                ;;
            12)
                print_header
                generate_initial_policy
                ;;
            17)
                print_header
                monitor_usb_events
                ;;
            18)
                print_header
                view_usbguard_logs
                ;;
            21)
                print_header
                configure_usbguard
                ;;
            0)
                echo -e "${GREEN}Goodbye!${NC}"
                log_message "Fangbull USBGuard Manager session ended"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option. Please try again.${NC}"
                ;;
        esac
        
        echo
        echo -n -e "${YELLOW}Press Enter to continue...${NC}"
        read -r
    done
}

# Run main function
main "$@"