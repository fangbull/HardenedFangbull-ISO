#!/usr/bin/env -S bash -e


# Hardened Fangbull Installer
# A simple TUI script to install Hardened Fangbull
# Author: root0emir
# Version: 1.0


clear

# Cosmetics (colours for text).
BOLD='\e[1m'
BRED='\e[91m'
BBLUE='\e[34m'  
BGREEN='\e[92m'
BYELLOW='\e[93m'
RESET='\e[0m'

# Pretty print (function).
info_print () {
    echo -e "${BOLD}${BGREEN}[ ${BYELLOW}•${BGREEN} ] $1${RESET}"
}

# Pretty print for input (function).
input_print () {
    echo -ne "${BOLD}${BYELLOW}[ ${BGREEN}•${BYELLOW} ] $1${RESET}"
}

# Alert user of bad input (function).
error_print () {
    echo -e "${BOLD}${BRED}[ ${BBLUE}•${BRED} ] $1${RESET}"
}

# User chooses the locale (function).
locale_selector () {
    input_print "Please insert the locale you use (format: xx_XX. Enter empty to use en_US, or \"/\" to search locales): "
    read -r locale
    case "$locale" in
        '') locale="en_US.UTF-8"
            info_print "$locale will be the default locale."
            return 0;;
        '/') sed -E '/^# +|^#$/d;s/^#| *$//g;s/ .*/ (Charset:&)/' /etc/locale.gen | less -M
                clear
                return 1;;
        *)  if ! grep -q "^#\?$(sed 's/[].*[]/\\&/g' <<< "$locale") " /etc/locale.gen; then
                error_print "The specified locale doesn't exist or isn't supported."
                return 1
            fi
            return 0
    esac
}

# User chooses the console keyboard layout (function).
keyboard_selector () {
    input_print "Please insert the keyboard layout to use in console (enter empty to use US, or \"/\" to look up for keyboard layouts): "
    read -r kblayout
    case "$kblayout" in
        '') kblayout="us"
            info_print "The standard US keyboard layout will be used."
            return 0;;
        '/') localectl list-keymaps
             clear
             return 1;;
        *) if ! localectl list-keymaps | grep -Fxq "$kblayout"; then
               error_print "The specified keymap doesn't exist."
               return 1
           fi
        info_print "Changing console layout to $kblayout."
        loadkeys "$kblayout"
        return 0
    esac
}

# User enters a hostname (function).
hostname_selector () {
    input_print "Please enter the hostname: "
    read -r hostname
    if [[ -z "$hostname" ]]; then
        error_print "You need to enter a hostname in order to continue."
        return 1
    fi
    return 0
}

# Setting up a password for the user account (function).
userpass_selector () {
    input_print "Please enter name for a user account: "
    read -r username
    if [[ -z "$username" ]]; then
        error_print "You need to enter a username in order to continue."
        return 1
    fi
    input_print "Please enter a password for $username (you're not going to see the password): "
    read -r -s userpass
    if [[ -z "$userpass" ]]; then
        echo
        error_print "You need to enter a password for $username, please try again."
        return 1
    fi
    echo
    input_print "Please enter the password again (you're not going to see it): " 
    read -r -s userpass2
    echo
    if [[ "$userpass" != "$userpass2" ]]; then
        echo
        error_print "Passwords don't match, please try again."
        return 1
    fi
    return 0
}

# Setting up a password for the root account (function).
rootpass_selector () {
    input_print "Please enter a password for the root user (you're not going to see it): "
    read -r -s rootpass
    if [[ -z "$rootpass" ]]; then
        echo
        error_print "You need to enter a password for the root user, please try again."
        return 1
    fi
    echo
    input_print "Please enter the password again (you're not going to see it): " 
    read -r -s rootpass2
    echo
    if [[ "$rootpass" != "$rootpass2" ]]; then
        error_print "Passwords don't match, please try again."
        return 1
    fi
    return 0
}

# User enters a password for the LUKS Container (function).
lukspass_selector () {
    input_print "Please enter a password for the LUKS container (you're not going to see the password): "
    read -r -s password
    if [[ -z "$password" ]]; then
        echo
        error_print "You need to enter a password for the LUKS Container, please try again."
        return 1
    fi
    echo
    input_print "Please enter the password for the LUKS container again (you're not going to see the password): "
    read -r -s password2
    echo
    if [[ "$password" != "$password2" ]]; then
        error_print "Passwords don't match, please try again."
        return 1
    fi
    return 0
}

# Welcome screen.
echo -ne "${BOLD}${BYELLOW}
=========================================================================
                                               
██╗  ██╗ █████╗ ██████╗ ██████╗ ███████╗███╗   ██╗███████╗██████╗   
██║  ██║██╔══██╗██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔════╝██╔══██╗  
███████║███████║██████╔╝██║  ██║█████╗  ██╔██╗ ██║█████╗  ██║  ██║  
██╔══██║██╔══██║██╔══██╗██║  ██║██╔══╝  ██║╚██╗██║██╔══╝  ██║  ██║  
██║  ██║██║  ██║██║  ██║██████╔╝███████╗██║ ╚████║███████╗██████╔╝  
╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═════╝   
                                                                    
███████╗ █████╗ ███╗   ██╗ ██████╗ ██████╗ ██╗   ██╗██╗     ██╗     
██╔════╝██╔══██╗████╗  ██║██╔════╝ ██╔══██╗██║   ██║██║     ██║     
█████╗  ███████║██╔██╗ ██║██║  ███╗██████╔╝██║   ██║██║     ██║     
██╔══╝  ██╔══██║██║╚██╗██║██║   ██║██╔══██╗██║   ██║██║     ██║     
██║     ██║  ██║██║ ╚████║╚██████╔╝██████╔╝╚██████╔╝███████╗███████╗
╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝╚══════╝
========================================================================
Secured by Default. Hardened by Design.
                Beyond Secure. It’s Fangbull.
========================================================================
${RESET}"
info_print "Welcome to Hardened Fangbull Installer, a simple TUI script to install Hardened Fangbull."

# Security warnings and disclaimers
echo -e "${BOLD}${BRED}
=========================================================================
                        🔒 SECURITY WARNINGS & DISCLAIMERS 🔒
=========================================================================${RESET}"

echo -e "${BOLD}${BYELLOW}⚠️  DISCLAIMER - READ CAREFULLY:${RESET}"
echo -e "${BOLD}This software is provided 'AS IS' without warranty of any kind.
The developers are NOT responsible for any damage, data loss, or
security breaches that may occur from using this system.${RESET}"
echo

echo -e "${BOLD}${BYELLOW}🛡️  FIREWALL & NETWORK ACCESS WARNING:${RESET}"
echo -e "${BOLD}Hardened Fangbull comes with a strict firewall (Great Fangbull Firewall).
If you modify firewall settings to allow VPN, Tor, or other network tools,
you SIGNIFICANTLY INCREASE your attack surface and security risks.
While you are free to make these changes, understand the consequences.${RESET}"
echo

echo -e "${BOLD}${BYELLOW}📦 AUR & PACKAGE MANAGER RESTRICTIONS:${RESET}"
echo -e "${BOLD}The following AUR helpers and package managers are BLOCKED by AppArmor:
• yay, paru, trizen, pikaur, chaotic-aur

This is intentional security hardening. AUR packages have been sources of
malware and supply chain attacks in the past. Hardened Fangbull block these to protect
your system from potentially malicious packages.

Use only official Arch repositories through 'pacman' for maximum security.${RESET}"
echo

echo -e "${BOLD}${BYELLOW}⚠️  USER RESPONSIBILITY WARNING:${RESET}"
echo -e "${BOLD}Even Hardened Fangbull cannot protect you from poor security practices:
• Be careful what you download and install
• Verify package signatures and sources
• Don't disable security features without understanding risks
• Keep your system updated regularly
• Use strong, unique passwords

YOUR ACTIONS determine your security level.${RESET}"
echo

echo -e "${BOLD}${BYELLOW}🔐 SUDO HARDENING NOTICE:${RESET}"
echo -e "${BOLD}This installation will apply balanced sudo hardening:
• Sudo timeout reduction
• Command logging and restrictions
• Root access limitations
• These settings protect against privilege escalation attacks${RESET}"
echo

echo -e "${BOLD}${BRED}=========================================================================
By continuing, you acknowledge that you have read and understood
all security warnings and accept full responsibility for your system.
=========================================================================${RESET}"
echo

input_print "Do you understand and accept these security warnings? (yes/no): "
read -r security_accept
case "$security_accept" in
    yes|YES|y|Y)
        info_print "Security warnings acknowledged. Proceeding with installation..."
        ;;
    *)
        error_print "Installation cancelled. Security warnings must be acknowledged."
        exit 1
        ;;
esac
echo

# Setting up locale and keyboard layout
until locale_selector; do : ; done
until keyboard_selector; do : ; done

# User sets up username and password
until userpass_selector; do : ; done
until rootpass_selector; do : ; done

# User sets up hostname
until hostname_selector; do : ; done

# Choosing the target for the installation.
info_print "Available disks for the installation:"
PS3="Please select the number of the corresponding disk (e.g. 1): "
select ENTRY in $(lsblk -dpnoNAME|grep -P "/dev/sd|nvme|vd");
do
    DISK="$ENTRY"
    info_print "Hardened Fangbull will be installed on the following disk: $DISK"
    break
done

# Setting up LUKS password.
until lukspass_selector; do : ; done

# Warn user about deletion of old partition scheme.
input_print "This will delete the current partition table on $DISK once installation starts. Do you agree [y/N]?: "
read -r disk_response
if ! [[ "${disk_response,,}" =~ ^(yes|y)$ ]]; then
    error_print "Quitting."
    exit
fi
info_print "Wiping $DISK."
wipefs -af "$DISK" &>/dev/null
sgdisk -Zo "$DISK" &>/dev/null

# Creating a new partition scheme.
info_print "Creating the partitions on $DISK."
parted -s "$DISK" \
    mklabel gpt \
    mkpart ESP fat32 1MiB 1025MiB \
    set 1 esp on \
    mkpart CRYPTROOT 1025MiB 100% \

ESP="/dev/disk/by-partlabel/ESP"
CRYPTROOT="/dev/disk/by-partlabel/CRYPTROOT"

# Informing the Kernel of the changes.
info_print "Informing the Kernel about the disk changes."
partprobe "$DISK"

# Formatting the ESP as FAT32.
info_print "Formatting the EFI Partition as FAT32."
mkfs.fat -F 32 "$ESP" &>/dev/null

# Creating a LUKS Container for the root partition.
info_print "Creating LUKS Container for the root partition."
echo -n "$password" | cryptsetup luksFormat "$CRYPTROOT" -d - &>/dev/null
echo -n "$password" | cryptsetup open "$CRYPTROOT" cryptroot -d - 
BTRFS="/dev/mapper/cryptroot"

# Formatting the LUKS Container as BTRFS.
info_print "Formatting the LUKS container as BTRFS."
mkfs.btrfs "$BTRFS" &>/dev/null
mount "$BTRFS" /mnt

# Creating BTRFS subvolumes.
info_print "Creating BTRFS subvolumes."
subvols=(snapshots var_pkgs var_log home root srv)
for subvol in '' "${subvols[@]}"; do
    btrfs su cr /mnt/@"$subvol" &>/dev/null
done

# Mounting the newly created subvolumes.
umount /mnt
info_print "Mounting the newly created subvolumes."
mountopts="ssd,noatime,compress-force=zstd:3,discard=async"
mount -o "$mountopts",subvol=@ "$BTRFS" /mnt
mkdir -p /mnt/{home,root,srv,.snapshots,var/{log,cache/pacman/pkg},boot}
for subvol in "${subvols[@]:2}"; do
    mount -o "$mountopts",subvol=@"$subvol" "$BTRFS" /mnt/"${subvol//_//}"
done
chmod 750 /mnt/root
mount -o "$mountopts",subvol=@snapshots "$BTRFS" /mnt/.snapshots
mount -o "$mountopts",subvol=@var_pkgs "$BTRFS" /mnt/var/cache/pacman/pkg
chattr +C /mnt/var/log
mount -o nosuid,nodev,noexec "$ESP" /mnt/boot/

# Pacstrap (setting up a base sytem onto the new root).
info_print "Installing the base system (it may take a while)."
pacstrap -K /mnt base btrfs-progs grub grub-btrfs rsync efibootmgr snapper reflector snap-pac zram-generator sudo &>/dev/null

# Setting up the hostname.
echo "$hostname" > /mnt/etc/hostname

# Generating /etc/fstab.
info_print "Generating a new fstab."
genfstab -U /mnt >> /mnt/etc/fstab

# Configure selected locale and console keymap
sed -i "/^#$locale/s/^#//" /mnt/etc/locale.gen
echo "LANG=$locale" > /mnt/etc/locale.conf
echo "KEYMAP=$kblayout" > /mnt/etc/vconsole.conf

# Setting hosts file.
info_print "Setting hosts file."
cat > /mnt/etc/hosts <<EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   $hostname.localdomain   $hostname
EOF

# Configuring /etc/mkinitcpio.conf.
info_print "Configuring /etc/mkinitcpio.conf."
cat > /mnt/etc/mkinitcpio.conf <<EOF
HOOKS=(systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems)
EOF

# Setting up LUKS2 encryption in grub.
info_print "Setting up grub config."
UUID=$(blkid -s UUID -o value $CRYPTROOT)
sed -i "\,^GRUB_CMDLINE_LINUX=\"\",s,\",&rd.luks.name=$UUID=cryptroot root=$BTRFS," /mnt/etc/default/grub

# Configuring the system.
info_print "Configuring the system (timezone, system clock, initramfs, Snapper, GRUB)."
arch-chroot /mnt /bin/bash -e <<EOF

    # Setting up timezone.
    ln -sf /usr/share/zoneinfo/$(curl -s http://ip-api.com/line?fields=timezone) /etc/localtime &>/dev/null

    # Setting up clock.
    hwclock --systohc

    # Generating locales.
    locale-gen &>/dev/null

    # Generating a new initramfs.
    mkinitcpio -P &>/dev/null

    # Snapper configuration.
    umount /.snapshots
    rm -r /.snapshots
    snapper --no-dbus -c root create-config /
    btrfs subvolume delete /.snapshots &>/dev/null
    mkdir /.snapshots
    mount -a &>/dev/null
    chmod 750 /.snapshots

    # Installing GRUB.
    grub-install --target=x86_64-efi --efi-directory=/boot/ --bootloader-id=GRUB &>/dev/null

    # Creating grub config file.
    grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null

EOF

# Setting root password.
info_print "Setting root password."
echo "root:$rootpass" | arch-chroot /mnt chpasswd

# Setting user password.
echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/wheel
info_print "Adding the user $username to the system with root privilege."
arch-chroot /mnt useradd -m -G wheel -s /bin/bash "$username"
info_print "Setting user password for $username."
echo "$username:$userpass" | arch-chroot /mnt chpasswd

# Boot backup hook.
info_print "Configuring /boot backup when pacman transactions are made."
mkdir -p /mnt/etc/pacman.d/hooks
cat > /mnt/etc/pacman.d/hooks/50-bootbackup.hook <<EOF
[Trigger]
Operation = Upgrade
Operation = Install
Operation = Remove
Type = Path
Target = usr/lib/modules/*/vmlinuz

[Action]
Depends = rsync
Description = Backing up /boot...
When = PostTransaction
Exec = /usr/bin/rsync -a --delete /boot /.bootbackup
EOF

# ZRAM configuration.
info_print "Configuring ZRAM."
cat > /mnt/etc/systemd/zram-generator.conf <<EOF
[zram0]
zram-size = min(ram, 8192)
EOF

# Pacman eye-candy features.
info_print "Enabling colours, animations, and parallel downloads for pacman."
sed -Ei 's/^#(Color)$/\1\nILoveCandy/;s/^#(ParallelDownloads).*/\1 = 10/' /mnt/etc/pacman.conf

# Sudo hardening configuration
info_print "Applying balanced sudo hardening for enhanced security."
cat > /mnt/etc/sudoers.d/99-hardened-fangbull <<EOF
# Hardened Fangbull Sudo Security Configuration
# Balanced approach - secure but compatible with automation

# Reduce sudo timeout (default is 15 minutes, reduce to 8)
Defaults    timestamp_timeout=8

# Log sudo commands for security auditing (without I/O to prevent disk bloat)
Defaults    logfile="/var/log/sudo.log"
Defaults    log_year, log_host, log_input

# Require password for sudo (disable NOPASSWD)
Defaults    !authenticate
Defaults    passwd_tries=3

# Security-focused environment handling with extended secure_path
Defaults    env_reset
Defaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/libexec:/usr/lib"

# Preserve essential environment variables
Defaults    env_keep += "LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET"
Defaults    env_keep += "HOME EDITOR PAGER TERM"
Defaults    env_keep += "XAUTHORIZATION XAUTHORITY DISPLAY"
Defaults    env_keep += "SSH_AUTH_SOCK SSH_CONNECTION"

# Disable potentially dangerous features
Defaults    !visiblepw
Defaults    always_set_home
Defaults    match_group_by_gid

# Conditional TTY requirement (allows automation but requires TTY for interactive)
Defaults:root    !requiretty
Defaults:%wheel   requiretty
Defaults    exempt_group=wheel

# User privilege specification (wheel group)
%wheel ALL=(ALL:ALL) ALL

# Deny dangerous commands that could compromise security
%wheel ALL=!/bin/su
%wheel ALL=!/usr/bin/passwd root
%wheel ALL=!/usr/bin/passwd ""
%wheel ALL=!/usr/sbin/visudo

# Allow essential system administration
%wheel ALL=(ALL) /usr/bin/systemctl
%wheel ALL=(ALL) /usr/bin/pacman
%wheel ALL=(ALL) /usr/local/bin/fangbull-sys
%wheel ALL=(ALL) /usr/local/bin/fangbull-usbguard
%wheel ALL=(ALL) /usr/local/bin/fangbull-jails
%wheel ALL=(ALL) /usr/local/bin/great-fangbull-firewall

# Allow automation-friendly commands without TTY
%wheel ALL=(ALL) NOPASSWD: /usr/bin/systemctl status *
%wheel ALL=(ALL) NOPASSWD: /usr/bin/systemctl is-active *
%wheel ALL=(ALL) NOPASSWD: /usr/bin/systemctl is-enabled *
EOF

# Create sudo log directories
mkdir -p /mnt/var/log/sudo-io
chmod 750 /mnt/var/log/sudo-io

# Set proper permissions for sudo configuration
chmod 440 /mnt/etc/sudoers.d/99-hardened-fangbull

# Enabling various services.
info_print "Enabling Reflector, automatic snapshots, BTRFS scrubbing and systemd-oomd."
services=(reflector.timer snapper-timeline.timer snapper-cleanup.timer btrfs-scrub@-.timer btrfs-scrub@home.timer btrfs-scrub@var-log.timer btrfs-scrub@\x2esnapshots.timer grub-btrfsd.service systemd-oomd)
for service in "${services[@]}"; do
    systemctl enable "$service" --root=/mnt &>/dev/null
done

# Finishing up.
info_print "Installation completed! You may now reboot into your new Hardened Fangbull system."

# Cleaning up the installer
SCRIPT_PATH=$(realpath "$0")
info_print "Cleaning up installer script..."
rm -f "$SCRIPT_PATH"

exit
