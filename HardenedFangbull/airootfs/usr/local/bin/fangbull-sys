#!/bin/bash

# Fangbull System Administrator - Hardened Fangbull
# Comprehensive system management and security monitoring tool
# Author: root0emir
# Version: 1.0

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration
FIREWALL_SCRIPT="/usr/local/bin/great-fangbull-firewall"
SYSTEM_LOG="/var/log/fangbull-sys.log"

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$SYSTEM_LOG"
}

# Print header
print_header() {
    clear
    echo -e "${CYAN}"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo "███████╗ █████╗ ███╗   ██╗ ██████╗ ██████╗ ██╗   ██╗██╗     ██╗     "
    echo "██╔════╝██╔══██╗████╗  ██║██╔════╝ ██╔══██╗██║   ██║██║     ██║     "
    echo "█████╗  ███████║██╔██╗ ██║██║  ███╗██████╔╝██║   ██║██║     ██║     "
    echo "██╔══╝  ██╔══██║██║╚██╗██║██║   ██║██╔══██╗██║   ██║██║     ██║     "
    echo "██║     ██║  ██║██║ ╚████║╚██████╔╝██████╔╝╚██████╔╝███████╗███████╗"
    echo "╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝╚══════╝"
    echo "                    SYSTEM ADMINISTRATOR v1.0                          "
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo -e "${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}[ERROR]${NC} This script must be run as root (sudo fangbull-sys)"
        exit 1
    fi
}

# System information display
show_system_info() {
    echo -e "${BLUE}[INFO]${NC} Gathering system information..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    # Basic system info
    echo -e "${CYAN}System Information:${NC}"
    echo "  Hostname: $(hostname)"
    echo "  Kernel: $(uname -r)"
    echo "  Architecture: $(uname -m)"
    echo "  Uptime: $(uptime -p)"
    echo "  Load Average: $(uptime | awk -F'load average:' '{print $2}')"
    echo
    
    # CPU and Memory
    echo -e "${CYAN}Hardware Resources:${NC}"
    echo "  CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
    echo "  CPU Cores: $(nproc)"
    echo "  Memory: $(free -h | awk '/^Mem:/ {print $2" total, "$3" used, "$7" available"}')"
    echo "  Swap: $(free -h | awk '/^Swap:/ {print $2" total, "$3" used"}')"
    echo
    
    # Disk usage
    echo -e "${CYAN}Disk Usage:${NC}"
    df -h | grep -E '^/dev/' | while read line; do
        echo "  $line"
    done
    echo
    
    # Network interfaces
    echo -e "${CYAN}Network Interfaces:${NC}"
    ip -4 addr show | grep -E '^[0-9]+:|inet ' | sed 's/^[0-9]*: //g' | while read line; do
        if [[ $line =~ ^[a-zA-Z] ]]; then
            echo "  Interface: $line"
        else
            echo "    $line"
        fi
    done
    echo
}

# IDS system removed - function disabled

# Check firewall status
check_firewall_status() {
    echo -e "${BLUE}[INFO]${NC} Checking Great Fangbull Firewall Status..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Firewall Service:${NC}"
    if systemctl is-active --quiet "great-fangbull-firewall"; then
        echo -e "  ${GREEN}✓${NC} Great Fangbull Firewall: ${GREEN}ACTIVE${NC}"
    else
        echo -e "  ${RED}✗${NC} Great Fangbull Firewall: ${RED}INACTIVE${NC}"
    fi
    
    echo -e "${CYAN}Iptables Rules:${NC}"
    local rule_count=$(iptables -L | wc -l)
    echo "  Active rules: $rule_count"
    
    echo -e "${CYAN}Recent Firewall Logs:${NC}"
    if journalctl -u great-fangbull-firewall --since "1 hour ago" --no-pager -q | head -5 | grep -q .; then
        journalctl -u great-fangbull-firewall --since "1 hour ago" --no-pager -q | head -5 | sed 's/^/  /'
    else
        echo "  No recent firewall logs"
    fi
    echo
}

# Network connections
show_network_connections() {
    echo -e "${BLUE}[INFO]${NC} Active Network Connections..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Listening Ports:${NC}"
    ss -tuln | head -20 | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}Active Connections:${NC}"
    ss -tun | head -10 | sed 's/^/  /'
    echo
}

# System update function
system_update() {
    echo -e "${BLUE}[INFO]${NC} Starting secure system update..."
    log_message "System update initiated"
    
    # Update package database
    echo -e "${YELLOW}[UPDATE]${NC} Updating package database..."
    if pacman -Sy --noconfirm; then
        echo -e "${GREEN}✓${NC} Package database updated successfully"
    else
        echo -e "${RED}✗${NC} Failed to update package database"
        return 1
    fi
    
    # Show available updates
    local updates=$(pacman -Qu | wc -l)
    echo -e "${CYAN}Available updates: $updates packages${NC}"
    
    if [[ $updates -gt 0 ]]; then
        echo -e "${YELLOW}[UPDATE]${NC} Upgrading system packages..."
        if pacman -Su --noconfirm; then
            echo -e "${GREEN}✓${NC} System updated successfully"
            log_message "System update completed successfully - $updates packages updated"
        else
            echo -e "${RED}✗${NC} System update failed"
            log_message "System update failed"
            return 1
        fi
    else
        echo -e "${GREEN}✓${NC} System is already up to date"
    fi
}

# Cache cleanup
clean_cache() {
    echo -e "${BLUE}[INFO]${NC} Cleaning system cache..."
    log_message "Cache cleanup initiated"
    
    # Pacman cache
    echo -e "${YELLOW}[CLEAN]${NC} Cleaning pacman cache..."
    local cache_size_before=$(du -sh /var/cache/pacman/pkg 2>/dev/null | cut -f1 || echo "0")
    if pacman -Sc --noconfirm; then
        local cache_size_after=$(du -sh /var/cache/pacman/pkg 2>/dev/null | cut -f1 || echo "0")
        echo -e "${GREEN}✓${NC} Pacman cache cleaned (was: $cache_size_before, now: $cache_size_after)"
    fi
    
    # Journal logs
    echo -e "${YELLOW}[CLEAN]${NC} Cleaning journal logs (keeping last 7 days)..."
    if journalctl --vacuum-time=7d; then
        echo -e "${GREEN}✓${NC} Journal logs cleaned"
    fi
    
    # Temporary files
    echo -e "${YELLOW}[CLEAN]${NC} Cleaning temporary files..."
    if [[ -d /tmp ]]; then
        find /tmp -type f -atime +7 -delete 2>/dev/null || true
        echo -e "${GREEN}✓${NC} Temporary files cleaned"
    fi
    
    log_message "Cache cleanup completed"
}

# Run security scans
security_scan() {
    echo -e "${BLUE}[INFO]${NC} Running security scans..."
    log_message "Security scan initiated"
    
    # RKHunter scan
    echo -e "${YELLOW}[SCAN]${NC} Running RKHunter rootkit scan..."
    if command -v rkhunter >/dev/null 2>&1; then
        if rkhunter --update --quiet && rkhunter --check --skip-keypress --quiet; then
            echo -e "${GREEN}✓${NC} RKHunter scan completed - No threats detected"
        else
            echo -e "${YELLOW}⚠${NC} RKHunter scan completed - Check logs for details"
        fi
    else
        echo -e "${RED}✗${NC} RKHunter not installed"
    fi
    
    # ClamAV scan
    echo -e "${YELLOW}[SCAN]${NC} Running ClamAV antivirus scan..."
    if command -v clamscan >/dev/null 2>&1; then
        echo -e "${BLUE}[INFO]${NC} Updating ClamAV database..."
        if freshclam --quiet; then
            echo -e "${GREEN}✓${NC} ClamAV database updated"
        fi
        
        echo -e "${BLUE}[INFO]${NC} Scanning critical directories..."
        local scan_dirs=("/home" "/tmp" "/var/tmp" "/usr/local/bin")
        local infected=0
        
        for dir in "${scan_dirs[@]}"; do
            if [[ -d "$dir" ]]; then
                echo "  Scanning $dir..."
                local result=$(clamscan -r "$dir" --quiet --infected --no-summary 2>/dev/null | wc -l)
                infected=$((infected + result))
            fi
        done
        
        if [[ $infected -eq 0 ]]; then
            echo -e "${GREEN}✓${NC} ClamAV scan completed - No malware detected"
        else
            echo -e "${RED}⚠${NC} ClamAV scan found $infected infected files - Check logs"
        fi
    else
        echo -e "${RED}✗${NC} ClamAV not installed"
    fi
    
    log_message "Security scan completed"
}

# View system logs
view_logs() {
    echo -e "${BLUE}[INFO]${NC} Recent System Logs..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}System Errors (last 10):${NC}"
    journalctl -p err --since "24 hours ago" --no-pager -q | tail -10 | sed 's/^/  /' || echo "  No errors found"
    echo
    
    echo -e "${CYAN}Authentication Logs (last 10):${NC}"
    journalctl -u systemd-logind --since "24 hours ago" --no-pager -q | tail -10 | sed 's/^/  /' || echo "  No auth logs found"
    echo
    
    echo -e "${CYAN}IDS Alert Summary:${NC}"
    if [[ -d "$LOG_DIR" ]]; then
        find "$LOG_DIR" -name '*.log' -mtime -1 -exec grep -l "CRITICAL\|ALERT\|WARNING" {} \; 2>/dev/null | while read logfile; do
            local alerts=$(grep -c "CRITICAL\|ALERT\|WARNING" "$logfile" 2>/dev/null || echo 0)
            echo "  $(basename "$logfile"): $alerts alerts"
        done
    else
        echo "  IDS log directory not found"
    fi
    echo
}

# Main menu
show_menu() {
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}MAIN MENU - FANGBULL SYSTEM ADMINISTRATOR:${NC}"
    echo -e "${YELLOW}System Information & Monitoring:${NC}"
    echo "  1) System Information & Hardware Details"
    echo "  2) Process & Resource Monitor"
    echo "  3) Disk Usage & File System Analysis"
    echo "  4) Network Connections & Interface Status"
    echo
    echo -e "${YELLOW}Security Management:${NC}"
    echo "  5) Firewall Status & Rules"
    echo "  6) Security Scan Suite (RKHunter + ClamAV + Custom)"
    echo "  7) Threat Intelligence & Attack Analysis"
    echo "  8) File Integrity Monitoring"
    echo
    echo -e "${YELLOW}System Maintenance:${NC}"
    echo "  9) System Update & Package Management"
    echo " 10) Cache & Log Cleanup"
    echo " 11) Service Management & Control"
    echo " 12) User & Permission Management"
    echo
    echo -e "${YELLOW}Advanced Operations:${NC}"
    echo " 13) System Performance Tuning"
    echo " 14) Backup & Recovery Tools"
    echo " 15) Network Diagnostics & Tools"
    echo " 16) System Logs & Forensic Analysis"
    echo
    echo -e "${YELLOW}Quick Actions:${NC}"
    echo " 17) Restart Firewall Service"
    echo " 18) Emergency Security Lockdown"
    echo "  0) Exit"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
}

# Restart firewall
restart_firewall() {
    echo -e "${BLUE}[INFO]${NC} Restarting Great Fangbull Firewall..."
    log_message "Firewall restart initiated"
    
    if systemctl restart great-fangbull-firewall; then
        echo -e "${GREEN}✓${NC} Great Fangbull Firewall restarted successfully"
        log_message "Firewall restarted successfully"
    else
        echo -e "${RED}✗${NC} Failed to restart firewall"
        log_message "Firewall restart failed"
    fi
}

# Process and resource monitor
show_process_monitor() {
    echo -e "${BLUE}[INFO]${NC} Process & Resource Monitor..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Top CPU Consuming Processes:${NC}"
    ps aux --sort=-%cpu | head -10 | awk 'NR==1{print "  "$0} NR>1{printf "  %-10s %-6s %-6s %-6s %s\n", $1, $2, $3, $4, $11}'
    echo
    
    echo -e "${CYAN}Top Memory Consuming Processes:${NC}"
    ps aux --sort=-%mem | head -10 | awk 'NR==1{print "  "$0} NR>1{printf "  %-10s %-6s %-6s %-6s %s\n", $1, $2, $3, $4, $11}'
    echo
    
    echo -e "${CYAN}System Load and Processes:${NC}"
    echo "  Load Average: $(uptime | awk -F'load average:' '{print $2}')"
    echo "  Running Processes: $(ps aux | wc -l)"
    echo "  Zombie Processes: $(ps aux | awk '$8 ~ /^Z/ { count++ } END { print count+0 }')"
    echo "  Active Users: $(who | wc -l)"
    echo
    
    echo -e "${CYAN}Memory Usage Details:${NC}"
    free -h | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}Swap Usage:${NC}"
    swapon --show | sed 's/^/  /' || echo "  No swap configured"
    echo
}

# Disk usage and filesystem analysis
show_disk_analysis() {
    echo -e "${BLUE}[INFO]${NC} Disk Usage & File System Analysis..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Filesystem Usage:${NC}"
    df -h | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}Inode Usage:${NC}"
    df -i | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}Largest Directories (Top 10):${NC}"
    du -sh /* 2>/dev/null | sort -rh | head -10 | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}Disk I/O Statistics:${NC}"
    if command -v iostat >/dev/null 2>&1; then
        iostat -x 1 1 | tail -n +4 | sed 's/^/  /'
    else
        echo "  iostat not available (install sysstat package)"
    fi
    echo
    
    echo -e "${CYAN}Mount Points:${NC}"
    mount | column -t | sed 's/^/  /'
    echo
}

# Threat intelligence and attack analysis
show_threat_analysis() {
    echo -e "${BLUE}[INFO]${NC} Threat Intelligence & Attack Analysis..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Recent Attack Attempts (Last 24h):${NC}"
    if [[ -d "$LOG_DIR" ]]; then
        local total_attacks=0
        find "$LOG_DIR" -name '*.log' -mtime -1 -exec grep -l "ATTACK\|THREAT\|MALICIOUS" {} \; 2>/dev/null | while read logfile; do
            local attacks=$(grep -c "ATTACK\|THREAT\|MALICIOUS" "$logfile" 2>/dev/null || echo 0)
            total_attacks=$((total_attacks + attacks))
            echo "  $(basename "$logfile"): $attacks attack attempts"
        done
        echo "  Total detected attacks: $total_attacks"
    else
        echo "  IDS log directory not found"
    fi
    echo
    
    echo -e "${CYAN}Firewall Blocked Connections:${NC}"
    if command -v journalctl >/dev/null 2>&1; then
        local blocked_count=$(journalctl --since "24 hours ago" | grep -c "\[.*-DROP\]" || echo 0)
        echo "  Blocked connections (24h): $blocked_count"
        echo "  Recent blocked IPs:"
        journalctl --since "1 hour ago" | grep "\[.*-DROP\]" | awk '{print $NF}' | sort | uniq -c | sort -nr | head -5 | sed 's/^/    /'
    fi
    echo
    
    echo -e "${CYAN}Failed Login Attempts:${NC}"
    local failed_logins=$(journalctl --since "24 hours ago" | grep -c "Failed password" || echo 0)
    echo "  Failed login attempts (24h): $failed_logins"
    if [[ $failed_logins -gt 0 ]]; then
        echo "  Recent failed login IPs:"
        journalctl --since "24 hours ago" | grep "Failed password" | awk '{print $(NF-3)}' | sort | uniq -c | sort -nr | head -5 | sed 's/^/    /'
    fi
    echo
}

# File integrity monitoring
show_file_integrity() {
    echo -e "${BLUE}[INFO]${NC} File Integrity Monitoring..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Critical System Files Status:${NC}"
    local critical_files=(
        "/etc/passwd"
        "/etc/shadow"
        "/etc/group"
        "/etc/sudoers"
        "/etc/fstab"
        "/usr/local/bin/great-fangbull-firewall"
        "/usr/local/bin/fangbull-sys"
    )
    
    for file in "${critical_files[@]}"; do
        if [[ -f "$file" ]]; then
            local perms=$(stat -c "%a" "$file")
            local owner=$(stat -c "%U:%G" "$file")
            local modified=$(stat -c "%y" "$file" | cut -d' ' -f1)
            local immutable=$(lsattr "$file" 2>/dev/null | grep -q "i" && echo "Yes" || echo "No")
            echo "  $file: $perms $owner (Modified: $modified, Immutable: $immutable)"
        else
            echo -e "  ${RED}$file: MISSING${NC}"
        fi
    done
    echo
    
    echo -e "${CYAN}Recently Modified System Files (Last 24h):${NC}"
    find /etc /usr/local/bin -type f -mtime -1 2>/dev/null | head -10 | while read file; do
        echo "  $file ($(stat -c "%y" "$file" | cut -d' ' -f1-2))"
    done
    echo
}

# Service management and control
show_service_management() {
    echo -e "${BLUE}[INFO]${NC} Service Management & Control..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Critical Security Services:${NC}"
    local security_services=(
        "great-fangbull-firewall"
        "apparmor"
        "permissionhardening"
    )
    
    for service in "${security_services[@]}"; do
        local status=$(systemctl is-active "$service" 2>/dev/null || echo "inactive")
        local enabled=$(systemctl is-enabled "$service" 2>/dev/null || echo "disabled")
        if [[ "$status" == "active" ]]; then
            echo -e "  ${GREEN}✓${NC} $service: $status ($enabled)"
        else
            echo -e "  ${RED}✗${NC} $service: $status ($enabled)"
        fi
    done
    echo
    
    echo -e "${CYAN}System Services Overview:${NC}"
    local total_services=$(systemctl list-units --type=service | grep -c "service")
    local active_services=$(systemctl list-units --type=service --state=active | grep -c "service")
    local failed_services=$(systemctl list-units --type=service --state=failed | grep -c "service")
    echo "  Total services: $total_services"
    echo "  Active services: $active_services"
    echo "  Failed services: $failed_services"
    echo
    
    if [[ $failed_services -gt 0 ]]; then
        echo -e "${CYAN}Failed Services:${NC}"
        systemctl list-units --type=service --state=failed --no-pager | grep "service" | sed 's/^/  /'
        echo
    fi
}

# Network diagnostics and tools
show_network_diagnostics() {
    echo -e "${BLUE}[INFO]${NC} Network Diagnostics & Tools..."
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    echo -e "${CYAN}Network Interface Statistics:${NC}"
    ip -s link show | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}Routing Table:${NC}"
    ip route show | sed 's/^/  /'
    echo
    
    echo -e "${CYAN}DNS Configuration:${NC}"
    if [[ -f /etc/resolv.conf ]]; then
        echo "  DNS Servers:"
        grep "nameserver" /etc/resolv.conf | sed 's/^/    /'
    fi
    echo
    
    echo -e "${CYAN}Network Connectivity Test:${NC}"
    echo "  Testing connectivity to key servers..."
    local test_hosts=("8.8.8.8" "1.1.1.1" "google.com")
    for host in "${test_hosts[@]}"; do
        if ping -c 1 -W 2 "$host" >/dev/null 2>&1; then
            echo -e "    ${GREEN}✓${NC} $host: Reachable"
        else
            echo -e "    ${RED}✗${NC} $host: Unreachable"
        fi
    done
    echo
}

# Emergency security lockdown
emergency_lockdown() {
    echo -e "${RED}[EMERGENCY]${NC} Initiating Security Lockdown..."
    log_message "Emergency security lockdown initiated"
    
    echo -e "${YELLOW}[WARNING]${NC} This will:"
    echo "  - Block all non-essential network traffic"
    echo "  - Restart all security services"
    echo "  - Enable maximum logging"
    echo "  - Lock critical system files"
    echo
    echo -n -e "${RED}Are you sure? (yes/no): ${NC}"
    read -r confirm
    
    if [[ "$confirm" == "yes" ]]; then
        echo -e "${BLUE}[INFO]${NC} Executing emergency lockdown..."
        
        # Restart firewall with maximum security
        systemctl restart great-fangbull-firewall
        
        # Enable maximum logging
        systemctl restart rsyslog
        
        # Lock critical files
        chattr +i /etc/passwd /etc/shadow /etc/group 2>/dev/null || true
        
        echo -e "${GREEN}✓${NC} Emergency lockdown completed"
        log_message "Emergency security lockdown completed successfully"
    else
        echo -e "${YELLOW}[INFO]${NC} Emergency lockdown cancelled"
    fi
}

# Main function
main() {
    check_root
    
    # Create log file if it doesn't exist
    mkdir -p "$(dirname "$SYSTEM_LOG")"
    touch "$SYSTEM_LOG"
    
    log_message "Fangbull System Administrator started"
    
    while true; do
        print_header
        show_menu
        
        echo -n -e "${YELLOW}Enter your choice [0-19]: ${NC}"
        read -r choice
        
        case $choice in
            1)
                print_header
                show_system_info
                ;;
            2)
                print_header
                show_process_monitor
                ;;
            3)
                print_header
                show_disk_analysis
                ;;
            4)
                print_header
                show_network_connections
                ;;
            5)
                print_header
                check_firewall_status
                ;;
            6)
                print_header
                security_scan
                ;;
            7)
                print_header
                show_threat_analysis
                ;;
            8)
                print_header
                show_file_integrity
                ;;
            9)
                print_header
                system_update
                ;;
            10)
                print_header
                clean_cache
                ;;
            11)
                print_header
                show_service_management
                ;;
            12)
                print_header
                echo -e "${BLUE}[INFO]${NC} User & Permission Management..."
                echo "  Current user: $(whoami)"
                echo "  Groups: $(groups)"
                echo "  Sudo access: $(sudo -l 2>/dev/null | wc -l) rules"
                echo "  Active sessions: $(who | wc -l)"
                ;;
            13)
                print_header
                echo -e "${BLUE}[INFO]${NC} System Performance Tuning..."
                echo "  CPU Governor: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null || echo 'N/A')"
                echo "  Swappiness: $(cat /proc/sys/vm/swappiness)"
                echo "  Dirty ratio: $(cat /proc/sys/vm/dirty_ratio)"
                echo "  TCP congestion control: $(cat /proc/sys/net/ipv4/tcp_congestion_control)"
                ;;
            14)
                print_header
                echo -e "${BLUE}[INFO]${NC} Backup & Recovery Tools..."
                echo "  Available backup tools:"
                command -v rsync >/dev/null && echo "    ✓ rsync available"
                command -v tar >/dev/null && echo "    ✓ tar available"
                command -v age >/dev/null && echo "    ✓ age encryption available"
                echo "  Use fangbull-crypt for secure backups"
                ;;
            15)
                print_header
                show_network_diagnostics
                ;;
            16)
                print_header
                view_system_logs
                ;;
            17)
                print_header
                echo -e "${BLUE}[INFO]${NC} Restarting Firewall Service..."
                restart_firewall
                systemctl restart apparmor
                echo -e "${GREEN}✓${NC} Security services restarted"
                ;;
            18)
                print_header
                emergency_lockdown
                ;;
            0) 
                echo -e "${GREEN}Goodbye!${NC}"
                log_message "fangbull-sys session ended"
                exit 0
                ;;
            *) 
                echo -e "${RED}Invalid option. Please try again.${NC}"
                ;;
        esac
        
        echo
        echo -n -e "${YELLOW}Press Enter to continue...${NC}"
        read -r
    done
}

# Run main function
main "$@"